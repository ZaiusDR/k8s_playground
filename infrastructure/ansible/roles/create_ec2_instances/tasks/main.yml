---
- name: Get Latest Ubuntu 24.04 LTS AMI Id
  set_fact:
    ubuntu_ami_id: "{{ lookup('amazon.aws.aws_ssm', ubuntu_ami_ssm_parameter_path) }}"

- name: Create SSH Access Security Group
  amazon.aws.ec2_security_group:
    name: "ssh-access-sg"
    description: "Security group for accessing by SSH"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: "22"
        to_port: "22"
        cidr_ip: "0.0.0.0/0"
  register: ssh_sg

- name: Create HAProxy Security Group
  amazon.aws.ec2_security_group:
    name: "ha-proxy-sg"
    description: "Security group for HAProxy Server"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: "{{ haproxy_ports }}"
        cidr_ip: "0.0.0.0/0"
  register: haproxy_sg

- name: Create HAProxy Instance
  amazon.aws.ec2_instance:
    key_name: "{{ key_pair_name }}"
    instance_type: t3.micro
    image_id: "{{ ubuntu_ami_id }}"
    security_groups:
      - "{{ ssh_sg.group_id }}"
      - "{{ haproxy_sg.group_id }}"
    wait: yes
    state: started
    exact_count: 1
    tags:
      Name: "haproxy"
      Role: "haproxy"
    filters:
      tag:Name: "haproxy"
      tag:Role: "haproxy"
      instance-state-name: "running"
  register: haproxy_info

- name: Create Vault Security Group
  amazon.aws.ec2_security_group:
    name: "vault-sg"
    description: "Security group for Vault Server"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: 8200
        cidr_ip: "{{ vpc_cidr }}"
  register: vault_sg

- name: Create Vault KMS Auto-unseal Key
  amazon.aws.kms_key:
    alias: vault-auto-unseal
    description: Vault Auto-Unseal Key
    tags:
      Name: vault-auto-unseal

- name: Create Vault Instance
  amazon.aws.ec2_instance:
    key_name: "{{ key_pair_name }}"
    instance_type: t3.micro
    image_id: "{{ ubuntu_ami_id }}"
    iam_instance_profile: "{{ vault_iam_instance_profile }}"
    security_groups:
      - "{{ ssh_sg.group_id }}"
      - "{{ vault_sg.group_id }}"
    wait: yes
    state: started
    exact_count: 1
    tags:
      Name: "vault"
      Role: "vault"
    filters:
      tag:Name: "vault"
      tag:Role: "vault"
      instance-state-name: "running"
  register: vault_info

- name: Create and Attach Vault Volume
  amazon.aws.ec2_vol:
    instance: "{{ vault_info['instances'][0]['instance_id'] }}"
    name: vault-volume
    volume_size: 2
    volume_type: gp3
    device_name: /dev/xvdf
    encrypted: true

- name: Create Control Plane Security Group
  amazon.aws.ec2_security_group:
    name: "control-plane-sg"
    description: "Security group for Control Plane Node"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: "{{ control_plane_ports_tcp }}"
        cidr_ip: "{{ vpc_cidr }}"
      - proto: tcp
        ports: "30080"
        cidr_ip: "{{ haproxy_info['instances'][0]['private_ip_address'] }}/32"
      - proto: tcp
        ports: "30443"
        cidr_ip: "{{ haproxy_info['instances'][0]['private_ip_address'] }}/32"
      - proto: udp
        ports: "{{ udp_ports }}"
        cidr_ip: "{{ vpc_cidr }}"
  register: control_plane_sg

- name: Create Nodes Security Group
  amazon.aws.ec2_security_group:
    name: "nodes-sg"
    description: "Security group for Nodes"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: "{{ worker_ports_tcp }}"
        cidr_ip: "{{ vpc_cidr }}"
      - proto: tcp
        ports: "30080"
        cidr_ip: "{{ haproxy_info['instances'][0]['private_ip_address'] }}/32"
      - proto: tcp
        ports: "30443"
        cidr_ip: "{{ haproxy_info['instances'][0]['private_ip_address'] }}/32"
      - proto: udp
        ports: "{{ udp_ports }}"
        cidr_ip: "{{ vpc_cidr }}"
  register: nodes_sg

- name: Create Control-plane Instance
  amazon.aws.ec2_instance:
    key_name: "{{ key_pair_name }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ubuntu_ami_id }}"
    iam_instance_profile: "{{ k8s_iam_instance_profile }}"
    volumes:
      - "{{ volume_options }}"
    security_groups:
      - "{{ ssh_sg.group_id }}"
      - "{{ control_plane_sg.group_id }}"
    wait: yes
    state: started
    exact_count: 1
    tags:
      Name: "control-plane01"
      Cluster: "k8s-cluster-node"
      Role: "control-plane"
    filters:
      tag:Name: "control-plane01"
      instance-state-name: "running"

- name: Create Nodes Instances
  amazon.aws.ec2_instance:
    key_name: "{{ key_pair_name }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ubuntu_ami_id }}"
    iam_instance_profile: "{{ k8s_iam_instance_profile }}"
    volumes:
      - "{{ volume_options }}"
    security_groups:
      - "{{ ssh_sg.group_id }}"
      - "{{ nodes_sg.group_id }}"
    wait: yes
    state: started
    exact_count: 1
    tags:
      Name: "node0{{ item }}"
      Cluster: "k8s-cluster-node"
      Role: "worker"
    filters:
      tag:Name: "node0{{ item }}"
      instance-state-name: "running"
  loop: "{{ range(1, 3) | list }}"

- name: Point DNS records to HAProxy
  amazon.aws.route53:
    zone: esuarez.info
    record: "{{ item }}.esuarez.info"
    type: A
    ttl: 300
    value: "{{ haproxy_info['instances'][0]['public_ip_address'] }}"
    wait: true
    state: present
    overwrite: true
  loop: "{{ subdomains }}"

- name: Point Apiserver DNS to Haproxy on Private HZ
  amazon.aws.route53:
    zone: esuarez.info
    private_zone: true
    record: k8s.esuarez.info
    type: A
    ttl: 300
    value: "{{ haproxy_info['instances'][0]['private_ip_address'] }}"
    wait: true
    state: present
    overwrite: true

- name: Point DNS to Vault
  amazon.aws.route53:
    zone: esuarez.info
    private_zone: true
    record: vault.esuarez.info
    type: A
    ttl: 300
    value: "{{ vault_info['instances'][0]['private_ip_address'] }}"
    wait: true
    state: present
    overwrite: true

- name: Refresh Dynamic Inventory
  ansible.builtin.meta: refresh_inventory

